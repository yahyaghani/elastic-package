type: httpjson
interval: {{interval}}                # from UI (e.g., 24h)
request.url: '{{url}}/v1/scans/vuln/changelogs'
request.method: GET
request.transforms:
  - set:
      target: url.params.limit
      value: '{{batch_size}}'
  - set:
      target: url.params.time
      value: '{{time_window}}'        # e.g., last_day | last_week | all_time
  - set:
      target: url.params.sort_desc
      value: 'created_at'
  - set:
      target: url.params.event_type
      value: 'vuln_status'
  - set:
      target: header.x-api-key
      value: '{{api_key}}'
  - set:
      target: header.x-team-id
      value: '{{team_id}}'
  - set:
      target: url.params.offset
      value: '[[ .cursor.offset ]]'
      default: '0'

response.split:
  target: body.data                  # each element is one event

# Advance offset by the number of events we just got
response.transforms:
  - set:
      target: cursor.offset
      value: '[[ add (toInt (.cursor.offset)) (toInt (len .last_response.body.data)) ]]'
      default: '0'

# Keep fetching while a full page was returned
response.pagination:
  - set:
      target: url.params.offset
      value: '[[ .cursor.offset ]]'
  - set:
      target: body._continue
      value: '[[ toInt (len .last_response.body.data) ]]'
  - delete:
      target: body._continue

# Optional: backoff if API is rate limited (customize if PD returns headers)
# request.rate_limit.limit/remaining/reset could be configured here.

processors:
  - decode_json_fields:
      fields: ['message.event.response']   # if you forward raw; weâ€™ll reparse in pipeline from projectdiscovery.vulnerability.response
      target: 'tmp_'
      ignore_missing: true
      overwrite_keys: true
